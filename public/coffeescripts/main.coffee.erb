//= require 'renderer.coffee'

$ = jQuery

$('#consoleOutput').hide()

class Space
  constructor: (@sys, @nodeCount) ->
    @nodes = {}
    @rels = {}
    @allNodes = []
    @allRels = []
    @hiddenNodeIds = []
    @hiddenRelIds = []

  addData: (data) ->
    @allNodes = data.nodes
    @allRels = data.rels
    @refresh()

  setHiddenData: (data) ->
    @hiddenNodeIds = data.nodeIds
    @hiddenRelIds = data.relIds
    @refresh()

  refresh: ->
    @clear()
    @addNodes @allNodes
    @addRels @allRels

  clear: ->
    for key, node of @nodes
      @sys.pruneNode(key)
    @nodes = {}
    @rels = {}

  getSelectedNode: ->
    @selectedNode

  setFilter: (filter) ->
    @filter = if filter then new RegExp(filter, 'i') else null

  setNodeCount: (n) ->
    @nodeCount = n

  addNodes: (nodes) ->
    return if nodes.length == 0

    inspect = (node) ->
      name = (for key, value of node.data
        "#{key}:#{value}").join(' ')
      name

    @selectedNode = nodes[0]
    @selectedNode.data.first = true

    filteredNodes = nodes.slice(0)
    filteredNodes = (node for node in filteredNodes when !@hiddenNodeIds.contains(node.id))
    filteredNodes = (node for node in filteredNodes when inspect(node).match(@filter)) if @filter

    return if filteredNodes.length is 0
    return if filteredNodes[0] is @selectedNode and filteredNodes.length is 1

    filteredNodes.unshift(@selectedNode)

    filteredNodes = filteredNodes[0...@nodeCount] if filteredNodes.length > @nodeCount

    for node in filteredNodes
      @sys.addNode(node.id, node.data) unless @nodes[node.id]
      @nodes[node.id] = node

  addRels: (rels) ->

    filteredRels = (rel for rel in rels when !@hiddenRelIds.contains(rel.data._neo_id))
    for rel in filteredRels
      if @nodes[rel.start_node] and @nodes[rel.end_node]
        @sys.addEdge(rel.start_node, rel.end_node, rel.data)
        @rels[rel.id] = rel
  
  node: (id) ->
    @nodes[id]

initFormListeners= (space, renderer, evalCode) ->
  $('#loadForm').submit  (e) ->
    e.preventDefault()
    console.log 'load'
    evalCode()

showDetails = (space, id=0) =>
  node = space.node(id)
  return unless node
  html = for key, value of node.data
    if key is 'first' then '' else "<tr><td>#{key}</td><td>#{value}</td></tr>"
  $('#details').empty().append(html.join('\n'))


initEventSubscribers = (eventBroker, appContext, space, renderer, getData) ->
  eventBroker.subscribe('nodeCountChanged', ->
    space.setNodeCount appContext.getNodeCount()
  )

  eventBroker.subscribe('nodeFilterChanged', ->
    space.setFilter appContext.getNodeFilter()
  )

  eventBroker.subscribe('keyFilterChanged', ->
    renderer.setKeyFilter appContext.getKeyFilter()
  )

  eventBroker.subscribe('nodeDataChanged', ->
     appContext.clearHiddenNodeData()
     nodeData = appContext.getNodeData()
     appContext.setActivatedNodeId(nodeData.nodes[0].id, true) if nodeData.nodes.length > 0
     space.addData appContext.getNodeData()
  )

  eventBroker.subscribe('hiddenNodeDataChanged', ->
     space.setHiddenData appContext.getHiddenNodeData()
  )

  eventBroker.subscribe('activatedNodeIdChanged', ->
     getData appContext.getActivatedNodeId()
  )

  eventBroker.subscribe('selectedNodeIdChanged', ->
     showDetails(space, appContext.getSelectedNodeId())
  )

  eventBroker.subscribe('refresh', ->
    space.refresh()
  )

$ ->

  sys = arbor.ParticleSystem(1000, 600, 0.5) # create the system with sensible repulsion/stiffness/friction
  sys.parameters({gravity:true}) # use center-gravity to make the graph settle nicely (ymmv)

  space = new Space(sys, @appContext.getNodeCount())

  appendToConsole = (text) ->
      $('#console').val($('#console').val()+ '\n#' + text)

  setError = (text) ->
      $('#consoleOutputArea').val(text)

  getData = (id=0) =>
    depth = $('#depth').val()
    code = if id is 0 then "node = Neo4j.ref_node" else "node = Node._load(#{id})"
    code += "; viz node"
    innerEvalCode(code, depth)

  evalCode = =>
    code = $('#console').val()
    depth = $('#depth').val()
    innerEvalCode(code, depth)

  innerEvalCode = (code, depth) =>
    appContext = @appContext
    console.log code
    $.getJSON "<%= root_url() %>/eval", {code: code, depth: depth}, (data) ->
      if data.result
        $('#consoleOutput').show()
        setError data.result
      else
        setError ""
        $('#consoleOutput').hide()
        appContext.setNodeData data

  activateNode = (id=0) =>
    @appContext.setActivatedNodeId(id)

  selectNode = (id=0) =>
    @appContext.setSelectedNodeId(id)

  objectHandler =
    activated: activateNode
    selected: selectNode

  sys.renderer = Renderer("#viewport", objectHandler) 

  initFormListeners(space, sys.renderer, evalCode)
  initEventSubscribers(@eventBroker, @appContext, space, sys.renderer, getData)
  activateNode(0)